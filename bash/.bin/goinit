#!/bin/bash

set -e

GITHUB_USERNAME=andrewslotin
PROJECT=$1

while [ -z "$PROJECT" ]; do
  echo -n "New project name: "
  read PROJECT
done

PROJECT_DIR=$GOPATH/src/github.com/$GITHUB_USERNAME/$PROJECT

mkdir -p $PROJECT_DIR
cd $PROJECT_DIR

# Makefile
echo | sed -e "s~@@PROJECT@@~$PROJECT~g" -e "s~@@GITHUB_USER@@~$GITHUB_USERNAME~g" > Makefile <<"EOF"
NAME := @@PROJECT@@
PREFIX ?= usr/local
VERSION := $$(git rev-parse HEAD | cut -c -6)
GOVERSION := $(shell go version)
BUILDDATE := $(shell date -u +"%B %d, %Y")
BUILDER := $(shell echo "`git config user.name` <`git config user.email`>")
PKG_RELEASE ?= 1
PROJECT_URL := "https://github.com/@@GITHUB_USER@@/$(NAME)"
LDFLAGS := -X 'main.version=$(VERSION)' \
           -X 'main.buildDate=$(BUILDDATE)' \
           -X 'main.builder=$(BUILDER)' \
           -X 'main.buildGoVersion=$(GOVERSION)'

# development tasks
PACKAGES := $$(go list ./... | grep -v /vendor/ | grep -v /cmd/)
test:
	go test $(PACKAGES)

benchmark:
	@echo "Running tests..."
	@go test -bench=. $(PACKAGES)

# build tasks
SOURCES := $(shell find . -type f \(-name '*.go' -and -not -name '*_test.go'\) )
build: $(SOURCES)
	go build -ldflags "$(LDFLAGS)" -o $(NAME)

all: test build
.DEFAULT_GOAL := all

clean:
	go clean

.PHONY: all build test benchmark clean
EOF

# main.go
echo | gofmt > main.go <<EOF
package main

import (
	"flag"
	"fmt"
	"os"
)

var (
	binaryName     = os.Args[0]
	version        = "n/a"
	buildDate      = "n/a"
	builder        = "n/a"
	buildGoVersion = "n/a"

	args struct {
		version bool
	}
)

func init() {
	flag.BoolVar(&args.version, "version", false, "Print version and quit")
	flag.Usage = func () {
		fmt.Fprintf(os.Stderr, "Usage: %s [OPTIONS]\nOptions:\n", binaryName)
		flag.PrintDefaults()
	}
}

func printVersion() {
	fmt.Printf("%s version %s built with %s by %s on %s\n", binaryName, version, buildGoVersion, builder, buildDate)
}

func main() {
	flag.Parse()
	if args.version {
		printVersion()
		os.Exit(0)
	}

	// Place your code here
}
EOF

# .gitignore
echo "$PROJECT" > .gitignore

# Init git repository
git init
